# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Hungarian')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Hungarian')
    _Hungarian = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Hungarian', [dirname(__file__)])
        except ImportError:
            import _Hungarian
            return _Hungarian
        try:
            _mod = imp.load_module('_Hungarian', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Hungarian = swig_import_helper()
    del swig_import_helper
else:
    import _Hungarian
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Hungarian.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Hungarian.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Hungarian.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Hungarian.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Hungarian.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Hungarian.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Hungarian.SwigPyIterator_copy(self)

    def next(self):
        return _Hungarian.SwigPyIterator_next(self)

    def __next__(self):
        return _Hungarian.SwigPyIterator___next__(self)

    def previous(self):
        return _Hungarian.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Hungarian.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Hungarian.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Hungarian.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Hungarian.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Hungarian.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Hungarian.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Hungarian.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Hungarian.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Hungarian.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Hungarian.VectorInt___nonzero__(self)

    def __bool__(self):
        return _Hungarian.VectorInt___bool__(self)

    def __len__(self):
        return _Hungarian.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _Hungarian.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Hungarian.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Hungarian.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Hungarian.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Hungarian.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Hungarian.VectorInt___setitem__(self, *args)

    def pop(self):
        return _Hungarian.VectorInt_pop(self)

    def append(self, x):
        return _Hungarian.VectorInt_append(self, x)

    def empty(self):
        return _Hungarian.VectorInt_empty(self)

    def size(self):
        return _Hungarian.VectorInt_size(self)

    def swap(self, v):
        return _Hungarian.VectorInt_swap(self, v)

    def begin(self):
        return _Hungarian.VectorInt_begin(self)

    def end(self):
        return _Hungarian.VectorInt_end(self)

    def rbegin(self):
        return _Hungarian.VectorInt_rbegin(self)

    def rend(self):
        return _Hungarian.VectorInt_rend(self)

    def clear(self):
        return _Hungarian.VectorInt_clear(self)

    def get_allocator(self):
        return _Hungarian.VectorInt_get_allocator(self)

    def pop_back(self):
        return _Hungarian.VectorInt_pop_back(self)

    def erase(self, *args):
        return _Hungarian.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _Hungarian.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Hungarian.VectorInt_push_back(self, x)

    def front(self):
        return _Hungarian.VectorInt_front(self)

    def back(self):
        return _Hungarian.VectorInt_back(self)

    def assign(self, n, x):
        return _Hungarian.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _Hungarian.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _Hungarian.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _Hungarian.VectorInt_reserve(self, n)

    def capacity(self):
        return _Hungarian.VectorInt_capacity(self)
    __swig_destroy__ = _Hungarian.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _Hungarian.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Hungarian.VectorVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Hungarian.VectorVectorInt___nonzero__(self)

    def __bool__(self):
        return _Hungarian.VectorVectorInt___bool__(self)

    def __len__(self):
        return _Hungarian.VectorVectorInt___len__(self)

    def __getslice__(self, i, j):
        return _Hungarian.VectorVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Hungarian.VectorVectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Hungarian.VectorVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Hungarian.VectorVectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Hungarian.VectorVectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Hungarian.VectorVectorInt___setitem__(self, *args)

    def pop(self):
        return _Hungarian.VectorVectorInt_pop(self)

    def append(self, x):
        return _Hungarian.VectorVectorInt_append(self, x)

    def empty(self):
        return _Hungarian.VectorVectorInt_empty(self)

    def size(self):
        return _Hungarian.VectorVectorInt_size(self)

    def swap(self, v):
        return _Hungarian.VectorVectorInt_swap(self, v)

    def begin(self):
        return _Hungarian.VectorVectorInt_begin(self)

    def end(self):
        return _Hungarian.VectorVectorInt_end(self)

    def rbegin(self):
        return _Hungarian.VectorVectorInt_rbegin(self)

    def rend(self):
        return _Hungarian.VectorVectorInt_rend(self)

    def clear(self):
        return _Hungarian.VectorVectorInt_clear(self)

    def get_allocator(self):
        return _Hungarian.VectorVectorInt_get_allocator(self)

    def pop_back(self):
        return _Hungarian.VectorVectorInt_pop_back(self)

    def erase(self, *args):
        return _Hungarian.VectorVectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _Hungarian.new_VectorVectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Hungarian.VectorVectorInt_push_back(self, x)

    def front(self):
        return _Hungarian.VectorVectorInt_front(self)

    def back(self):
        return _Hungarian.VectorVectorInt_back(self)

    def assign(self, n, x):
        return _Hungarian.VectorVectorInt_assign(self, n, x)

    def resize(self, *args):
        return _Hungarian.VectorVectorInt_resize(self, *args)

    def insert(self, *args):
        return _Hungarian.VectorVectorInt_insert(self, *args)

    def reserve(self, n):
        return _Hungarian.VectorVectorInt_reserve(self, n)

    def capacity(self):
        return _Hungarian.VectorVectorInt_capacity(self)
    __swig_destroy__ = _Hungarian.delete_VectorVectorInt
    __del__ = lambda self: None
VectorVectorInt_swigregister = _Hungarian.VectorVectorInt_swigregister
VectorVectorInt_swigregister(VectorVectorInt)

class VectorShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorShort, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Hungarian.VectorShort_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Hungarian.VectorShort___nonzero__(self)

    def __bool__(self):
        return _Hungarian.VectorShort___bool__(self)

    def __len__(self):
        return _Hungarian.VectorShort___len__(self)

    def __getslice__(self, i, j):
        return _Hungarian.VectorShort___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Hungarian.VectorShort___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Hungarian.VectorShort___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Hungarian.VectorShort___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Hungarian.VectorShort___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Hungarian.VectorShort___setitem__(self, *args)

    def pop(self):
        return _Hungarian.VectorShort_pop(self)

    def append(self, x):
        return _Hungarian.VectorShort_append(self, x)

    def empty(self):
        return _Hungarian.VectorShort_empty(self)

    def size(self):
        return _Hungarian.VectorShort_size(self)

    def swap(self, v):
        return _Hungarian.VectorShort_swap(self, v)

    def begin(self):
        return _Hungarian.VectorShort_begin(self)

    def end(self):
        return _Hungarian.VectorShort_end(self)

    def rbegin(self):
        return _Hungarian.VectorShort_rbegin(self)

    def rend(self):
        return _Hungarian.VectorShort_rend(self)

    def clear(self):
        return _Hungarian.VectorShort_clear(self)

    def get_allocator(self):
        return _Hungarian.VectorShort_get_allocator(self)

    def pop_back(self):
        return _Hungarian.VectorShort_pop_back(self)

    def erase(self, *args):
        return _Hungarian.VectorShort_erase(self, *args)

    def __init__(self, *args):
        this = _Hungarian.new_VectorShort(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Hungarian.VectorShort_push_back(self, x)

    def front(self):
        return _Hungarian.VectorShort_front(self)

    def back(self):
        return _Hungarian.VectorShort_back(self)

    def assign(self, n, x):
        return _Hungarian.VectorShort_assign(self, n, x)

    def resize(self, *args):
        return _Hungarian.VectorShort_resize(self, *args)

    def insert(self, *args):
        return _Hungarian.VectorShort_insert(self, *args)

    def reserve(self, n):
        return _Hungarian.VectorShort_reserve(self, n)

    def capacity(self):
        return _Hungarian.VectorShort_capacity(self)
    __swig_destroy__ = _Hungarian.delete_VectorShort
    __del__ = lambda self: None
VectorShort_swigregister = _Hungarian.VectorShort_swigregister
VectorShort_swigregister(VectorShort)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Hungarian.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Hungarian.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _Hungarian.VectorDouble___bool__(self)

    def __len__(self):
        return _Hungarian.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _Hungarian.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Hungarian.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Hungarian.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Hungarian.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Hungarian.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Hungarian.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _Hungarian.VectorDouble_pop(self)

    def append(self, x):
        return _Hungarian.VectorDouble_append(self, x)

    def empty(self):
        return _Hungarian.VectorDouble_empty(self)

    def size(self):
        return _Hungarian.VectorDouble_size(self)

    def swap(self, v):
        return _Hungarian.VectorDouble_swap(self, v)

    def begin(self):
        return _Hungarian.VectorDouble_begin(self)

    def end(self):
        return _Hungarian.VectorDouble_end(self)

    def rbegin(self):
        return _Hungarian.VectorDouble_rbegin(self)

    def rend(self):
        return _Hungarian.VectorDouble_rend(self)

    def clear(self):
        return _Hungarian.VectorDouble_clear(self)

    def get_allocator(self):
        return _Hungarian.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _Hungarian.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _Hungarian.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _Hungarian.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Hungarian.VectorDouble_push_back(self, x)

    def front(self):
        return _Hungarian.VectorDouble_front(self)

    def back(self):
        return _Hungarian.VectorDouble_back(self)

    def assign(self, n, x):
        return _Hungarian.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _Hungarian.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _Hungarian.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _Hungarian.VectorDouble_reserve(self, n)

    def capacity(self):
        return _Hungarian.VectorDouble_capacity(self)
    __swig_destroy__ = _Hungarian.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _Hungarian.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorVectorShort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVectorShort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVectorShort, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Hungarian.VectorVectorShort_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Hungarian.VectorVectorShort___nonzero__(self)

    def __bool__(self):
        return _Hungarian.VectorVectorShort___bool__(self)

    def __len__(self):
        return _Hungarian.VectorVectorShort___len__(self)

    def __getslice__(self, i, j):
        return _Hungarian.VectorVectorShort___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Hungarian.VectorVectorShort___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Hungarian.VectorVectorShort___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Hungarian.VectorVectorShort___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Hungarian.VectorVectorShort___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Hungarian.VectorVectorShort___setitem__(self, *args)

    def pop(self):
        return _Hungarian.VectorVectorShort_pop(self)

    def append(self, x):
        return _Hungarian.VectorVectorShort_append(self, x)

    def empty(self):
        return _Hungarian.VectorVectorShort_empty(self)

    def size(self):
        return _Hungarian.VectorVectorShort_size(self)

    def swap(self, v):
        return _Hungarian.VectorVectorShort_swap(self, v)

    def begin(self):
        return _Hungarian.VectorVectorShort_begin(self)

    def end(self):
        return _Hungarian.VectorVectorShort_end(self)

    def rbegin(self):
        return _Hungarian.VectorVectorShort_rbegin(self)

    def rend(self):
        return _Hungarian.VectorVectorShort_rend(self)

    def clear(self):
        return _Hungarian.VectorVectorShort_clear(self)

    def get_allocator(self):
        return _Hungarian.VectorVectorShort_get_allocator(self)

    def pop_back(self):
        return _Hungarian.VectorVectorShort_pop_back(self)

    def erase(self, *args):
        return _Hungarian.VectorVectorShort_erase(self, *args)

    def __init__(self, *args):
        this = _Hungarian.new_VectorVectorShort(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Hungarian.VectorVectorShort_push_back(self, x)

    def front(self):
        return _Hungarian.VectorVectorShort_front(self)

    def back(self):
        return _Hungarian.VectorVectorShort_back(self)

    def assign(self, n, x):
        return _Hungarian.VectorVectorShort_assign(self, n, x)

    def resize(self, *args):
        return _Hungarian.VectorVectorShort_resize(self, *args)

    def insert(self, *args):
        return _Hungarian.VectorVectorShort_insert(self, *args)

    def reserve(self, n):
        return _Hungarian.VectorVectorShort_reserve(self, n)

    def capacity(self):
        return _Hungarian.VectorVectorShort_capacity(self)
    __swig_destroy__ = _Hungarian.delete_VectorVectorShort
    __del__ = lambda self: None
VectorVectorShort_swigregister = _Hungarian.VectorVectorShort_swigregister
VectorVectorShort_swigregister(VectorVectorShort)

class VectorVectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Hungarian.VectorVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Hungarian.VectorVectorDouble___nonzero__(self)

    def __bool__(self):
        return _Hungarian.VectorVectorDouble___bool__(self)

    def __len__(self):
        return _Hungarian.VectorVectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _Hungarian.VectorVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Hungarian.VectorVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Hungarian.VectorVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Hungarian.VectorVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Hungarian.VectorVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Hungarian.VectorVectorDouble___setitem__(self, *args)

    def pop(self):
        return _Hungarian.VectorVectorDouble_pop(self)

    def append(self, x):
        return _Hungarian.VectorVectorDouble_append(self, x)

    def empty(self):
        return _Hungarian.VectorVectorDouble_empty(self)

    def size(self):
        return _Hungarian.VectorVectorDouble_size(self)

    def swap(self, v):
        return _Hungarian.VectorVectorDouble_swap(self, v)

    def begin(self):
        return _Hungarian.VectorVectorDouble_begin(self)

    def end(self):
        return _Hungarian.VectorVectorDouble_end(self)

    def rbegin(self):
        return _Hungarian.VectorVectorDouble_rbegin(self)

    def rend(self):
        return _Hungarian.VectorVectorDouble_rend(self)

    def clear(self):
        return _Hungarian.VectorVectorDouble_clear(self)

    def get_allocator(self):
        return _Hungarian.VectorVectorDouble_get_allocator(self)

    def pop_back(self):
        return _Hungarian.VectorVectorDouble_pop_back(self)

    def erase(self, *args):
        return _Hungarian.VectorVectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _Hungarian.new_VectorVectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Hungarian.VectorVectorDouble_push_back(self, x)

    def front(self):
        return _Hungarian.VectorVectorDouble_front(self)

    def back(self):
        return _Hungarian.VectorVectorDouble_back(self)

    def assign(self, n, x):
        return _Hungarian.VectorVectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _Hungarian.VectorVectorDouble_resize(self, *args)

    def insert(self, *args):
        return _Hungarian.VectorVectorDouble_insert(self, *args)

    def reserve(self, n):
        return _Hungarian.VectorVectorDouble_reserve(self, n)

    def capacity(self):
        return _Hungarian.VectorVectorDouble_capacity(self)
    __swig_destroy__ = _Hungarian.delete_VectorVectorDouble
    __del__ = lambda self: None
VectorVectorDouble_swigregister = _Hungarian.VectorVectorDouble_swigregister
VectorVectorDouble_swigregister(VectorVectorDouble)

class VectorBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorBool, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Hungarian.VectorBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Hungarian.VectorBool___nonzero__(self)

    def __bool__(self):
        return _Hungarian.VectorBool___bool__(self)

    def __len__(self):
        return _Hungarian.VectorBool___len__(self)

    def __getslice__(self, i, j):
        return _Hungarian.VectorBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Hungarian.VectorBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Hungarian.VectorBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Hungarian.VectorBool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Hungarian.VectorBool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Hungarian.VectorBool___setitem__(self, *args)

    def pop(self):
        return _Hungarian.VectorBool_pop(self)

    def append(self, x):
        return _Hungarian.VectorBool_append(self, x)

    def empty(self):
        return _Hungarian.VectorBool_empty(self)

    def size(self):
        return _Hungarian.VectorBool_size(self)

    def swap(self, v):
        return _Hungarian.VectorBool_swap(self, v)

    def begin(self):
        return _Hungarian.VectorBool_begin(self)

    def end(self):
        return _Hungarian.VectorBool_end(self)

    def rbegin(self):
        return _Hungarian.VectorBool_rbegin(self)

    def rend(self):
        return _Hungarian.VectorBool_rend(self)

    def clear(self):
        return _Hungarian.VectorBool_clear(self)

    def get_allocator(self):
        return _Hungarian.VectorBool_get_allocator(self)

    def pop_back(self):
        return _Hungarian.VectorBool_pop_back(self)

    def erase(self, *args):
        return _Hungarian.VectorBool_erase(self, *args)

    def __init__(self, *args):
        this = _Hungarian.new_VectorBool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Hungarian.VectorBool_push_back(self, x)

    def front(self):
        return _Hungarian.VectorBool_front(self)

    def back(self):
        return _Hungarian.VectorBool_back(self)

    def assign(self, n, x):
        return _Hungarian.VectorBool_assign(self, n, x)

    def resize(self, *args):
        return _Hungarian.VectorBool_resize(self, *args)

    def insert(self, *args):
        return _Hungarian.VectorBool_insert(self, *args)

    def reserve(self, n):
        return _Hungarian.VectorBool_reserve(self, n)

    def capacity(self):
        return _Hungarian.VectorBool_capacity(self)
    __swig_destroy__ = _Hungarian.delete_VectorBool
    __del__ = lambda self: None
VectorBool_swigregister = _Hungarian.VectorBool_swigregister
VectorBool_swigregister(VectorBool)

class VectorVectorBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVectorBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVectorBool, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _Hungarian.VectorVectorBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Hungarian.VectorVectorBool___nonzero__(self)

    def __bool__(self):
        return _Hungarian.VectorVectorBool___bool__(self)

    def __len__(self):
        return _Hungarian.VectorVectorBool___len__(self)

    def __getslice__(self, i, j):
        return _Hungarian.VectorVectorBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _Hungarian.VectorVectorBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _Hungarian.VectorVectorBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _Hungarian.VectorVectorBool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _Hungarian.VectorVectorBool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _Hungarian.VectorVectorBool___setitem__(self, *args)

    def pop(self):
        return _Hungarian.VectorVectorBool_pop(self)

    def append(self, x):
        return _Hungarian.VectorVectorBool_append(self, x)

    def empty(self):
        return _Hungarian.VectorVectorBool_empty(self)

    def size(self):
        return _Hungarian.VectorVectorBool_size(self)

    def swap(self, v):
        return _Hungarian.VectorVectorBool_swap(self, v)

    def begin(self):
        return _Hungarian.VectorVectorBool_begin(self)

    def end(self):
        return _Hungarian.VectorVectorBool_end(self)

    def rbegin(self):
        return _Hungarian.VectorVectorBool_rbegin(self)

    def rend(self):
        return _Hungarian.VectorVectorBool_rend(self)

    def clear(self):
        return _Hungarian.VectorVectorBool_clear(self)

    def get_allocator(self):
        return _Hungarian.VectorVectorBool_get_allocator(self)

    def pop_back(self):
        return _Hungarian.VectorVectorBool_pop_back(self)

    def erase(self, *args):
        return _Hungarian.VectorVectorBool_erase(self, *args)

    def __init__(self, *args):
        this = _Hungarian.new_VectorVectorBool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _Hungarian.VectorVectorBool_push_back(self, x)

    def front(self):
        return _Hungarian.VectorVectorBool_front(self)

    def back(self):
        return _Hungarian.VectorVectorBool_back(self)

    def assign(self, n, x):
        return _Hungarian.VectorVectorBool_assign(self, n, x)

    def resize(self, *args):
        return _Hungarian.VectorVectorBool_resize(self, *args)

    def insert(self, *args):
        return _Hungarian.VectorVectorBool_insert(self, *args)

    def reserve(self, n):
        return _Hungarian.VectorVectorBool_reserve(self, n)

    def capacity(self):
        return _Hungarian.VectorVectorBool_capacity(self)
    __swig_destroy__ = _Hungarian.delete_VectorVectorBool
    __del__ = lambda self: None
VectorVectorBool_swigregister = _Hungarian.VectorVectorBool_swigregister
VectorVectorBool_swigregister(VectorVectorBool)

class PairIntUint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntUint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntUint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Hungarian.new_PairIntUint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _Hungarian.PairIntUint_first_set
    __swig_getmethods__["first"] = _Hungarian.PairIntUint_first_get
    if _newclass:
        first = _swig_property(_Hungarian.PairIntUint_first_get, _Hungarian.PairIntUint_first_set)
    __swig_setmethods__["second"] = _Hungarian.PairIntUint_second_set
    __swig_getmethods__["second"] = _Hungarian.PairIntUint_second_get
    if _newclass:
        second = _swig_property(_Hungarian.PairIntUint_second_get, _Hungarian.PairIntUint_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _Hungarian.delete_PairIntUint
    __del__ = lambda self: None
PairIntUint_swigregister = _Hungarian.PairIntUint_swigregister
PairIntUint_swigregister(PairIntUint)

class HungarianAlgorithm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HungarianAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HungarianAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _Hungarian.new_HungarianAlgorithm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Hungarian.delete_HungarianAlgorithm
    __del__ = lambda self: None

    def Solve(self, DistMatrix, Assignment):
        return _Hungarian.HungarianAlgorithm_Solve(self, DistMatrix, Assignment)
HungarianAlgorithm_swigregister = _Hungarian.HungarianAlgorithm_swigregister
HungarianAlgorithm_swigregister(HungarianAlgorithm)

# This file is compatible with both classic and new-style classes.


